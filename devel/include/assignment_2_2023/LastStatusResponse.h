// Generated by gencpp from file assignment_2_2023/LastStatusResponse.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT_2_2023_MESSAGE_LASTSTATUSRESPONSE_H
#define ASSIGNMENT_2_2023_MESSAGE_LASTSTATUSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace assignment_2_2023
{
template <class ContainerAllocator>
struct LastStatusResponse_
{
  typedef LastStatusResponse_<ContainerAllocator> Type;

  LastStatusResponse_()
    : distance_to_target(0.0)
    , average_speed(0.0)  {
    }
  LastStatusResponse_(const ContainerAllocator& _alloc)
    : distance_to_target(0.0)
    , average_speed(0.0)  {
  (void)_alloc;
    }



   typedef double _distance_to_target_type;
  _distance_to_target_type distance_to_target;

   typedef double _average_speed_type;
  _average_speed_type average_speed;





  typedef boost::shared_ptr< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> const> ConstPtr;

}; // struct LastStatusResponse_

typedef ::assignment_2_2023::LastStatusResponse_<std::allocator<void> > LastStatusResponse;

typedef boost::shared_ptr< ::assignment_2_2023::LastStatusResponse > LastStatusResponsePtr;
typedef boost::shared_ptr< ::assignment_2_2023::LastStatusResponse const> LastStatusResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment_2_2023::LastStatusResponse_<ContainerAllocator1> & lhs, const ::assignment_2_2023::LastStatusResponse_<ContainerAllocator2> & rhs)
{
  return lhs.distance_to_target == rhs.distance_to_target &&
    lhs.average_speed == rhs.average_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment_2_2023::LastStatusResponse_<ContainerAllocator1> & lhs, const ::assignment_2_2023::LastStatusResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment_2_2023

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6cfeb7770557ec0e7e7227af7085b94";
  }

  static const char* value(const ::assignment_2_2023::LastStatusResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6cfeb7770557ec0ULL;
  static const uint64_t static_value2 = 0xe7e7227af7085b94ULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment_2_2023/LastStatusResponse";
  }

  static const char* value(const ::assignment_2_2023::LastStatusResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 distance_to_target\n"
"float64 average_speed\n"
"\n"
;
  }

  static const char* value(const ::assignment_2_2023::LastStatusResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance_to_target);
      stream.next(m.average_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LastStatusResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment_2_2023::LastStatusResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment_2_2023::LastStatusResponse_<ContainerAllocator>& v)
  {
    s << indent << "distance_to_target: ";
    Printer<double>::stream(s, indent + "  ", v.distance_to_target);
    s << indent << "average_speed: ";
    Printer<double>::stream(s, indent + "  ", v.average_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT_2_2023_MESSAGE_LASTSTATUSRESPONSE_H
